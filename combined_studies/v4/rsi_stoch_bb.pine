//@version=4
study(title="RSI and Stoch (Brahim)", shorttitle="RSI/Stoch Signal", overlay=true)

// Bollinger

length = input(title="Length", type=input.integer, defval=20, minval=1)
src = input(close, title="Source")
mult = input(type=input.float, defval=2.0, minval=0.001, maxval=50, title="StdDev")
offset = input(defval=10, title="Offset", type=input.integer, minval = -500, maxval = 500)
near_offset = input(defval=20, title="Near Offset", type=input.integer)

basis = sma(src, length)
dev = mult * stdev(src, length)
upper = basis + dev
lower = basis - dev

between(price, min,max) =>
    is_between = price <= max and price >= min
    is_between

isPriceNearLower(lower, price) =>
    max = lower + near_offset
    min = lower - near_offset
    is_near = between(price, min, max)
    is_near

isPriceNearUpper(upper, price) =>
    max = upper + near_offset
    min = upper - near_offset
    is_near = between(price, min, max)
    is_near

price_near_lower_bb = isPriceNearLower(lower, low)
price_near_upper_bb = isPriceNearUpper(upper, high)


// RSI inputs

rsi_source = input(title="RSI Source", type=input.source, defval=close)
rsi_length = input(title="RSI stoch_length", type=input.integer, defval=7)
rsi_over_bought_level = input(title="RSI Overbought Level", type=input.integer, defval=70)
rsi_over_sold_level = input(title="RSI Oversold Level", type=input.integer, defval=30)

isRSIOverBought(rsi_over_bought_level) =>
    rsiValue = rsi(rsi_source, rsi_length)
    is_over_bought = rsiValue >= rsi_over_bought_level
    is_over_bought

isRSIOverSold(rsi_over_sold_level) =>
    rsiValue = rsi(rsi_source, rsi_length)
    is_over_sold = rsiValue <= rsi_over_sold_level
    is_over_sold

// Stoch inputs

stoch_length = input(defval=14, minval=1, title = "Stochastic Length")
k = input(defval=1, minval=1, title = "Stochastic %K")
d = input(defval=3, minval=1, title = "Stochastic %D")
stoch_over_bought_level = input(title="RSI Overbought Level", type=input.integer, defval=80)
stoch_over_sold_level = input(title="RSI Oversold Level", type=input.integer, defval=20)


isStochOverBought(stoch_over_bought_level, k) => 
    Sto = stoch (close, high, low, stoch_length)
    K= sma (Sto, k)
    is_over_bought = K >= stoch_over_bought_level
    is_over_bought

isStochOverSold(stoch_over_sold_level, k) => 
    Sto = stoch (close, high, low, stoch_length)
    K= sma (Sto, k)
    is_over_sold = K <= stoch_over_sold_level
    is_over_sold


price_is_over_bought = isRSIOverBought(rsi_over_bought_level) and isStochOverBought(stoch_over_bought_level, k)
price_is_over_sold = isRSIOverSold(rsi_over_sold_level) and isStochOverSold(stoch_over_sold_level, k)


// All combined

should_buy() => 
    conditions_met = price_is_over_sold and price_near_lower_bb
    conditions_met

should_sell() => 
    conditions_met = price_is_over_bought and price_near_upper_bb
    conditions_met



plotshape(should_buy(), title= "Should Buy", location=location.belowbar, color=color.green, transp=0, style=shape.triangleup, text="BUY")
plotshape(should_sell(), title= "Should Sell", location=location.belowbar, color=color.red, transp=0, style=shape.triangledown, text="SELL")


// Plot
// plotshape(price_is_over_bought,  title= "Overbought", location=location.abovebar, color=color.red, transp=0, style=shape.triangledown, text="OB")
// plotshape(price_is_over_sold, title= "Oversold", location=location.belowbar, color=color.green, transp=0, style=shape.triangleup, text="OS")

// alertcondition(price_is_over_bought or price_is_over_sold, title="Stoch Alert!", message="Stoch Alert")
